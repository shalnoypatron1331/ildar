from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from db.models import User
from utils.logger import log_user_action
from keyboards.main import main_menu, service_menu, directions_kb

router = Router()


async def ensure_user(session: AsyncSession, message: Message) -> None:
    stmt = await session.execute(
        User.__table__.select().where(User.telegram_id == message.from_user.id)
    )
    user = stmt.fetchone()
    if not user:
        session.add(User(telegram_id=message.from_user.id, username=message.from_user.username))
        await session.commit()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, session: AsyncSession):
    await state.clear()
    await ensure_user(session, message)
    await message.answer('üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª üëá', reply_markup=main_menu())
    log_user_action(message.from_user.id, '/start', message.from_user.username)


@router.callback_query(F.data == 'service')
async def show_service(call: CallbackQuery):
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:', reply_markup=service_menu())
    await call.answer()
    log_user_action(call.from_user.id, 'service', call.from_user.username)


@router.callback_query(F.data == 'directions')
async def show_directions(call: CallbackQuery):
    text = 'üìç –ê–¥—Ä–µ—Å: –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 5, –æ—Ñ–∏—Å 21\nüöá –ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ç—Ä–æ: –¢–µ—Ö–Ω–æ–ø–∞—Ä–∫\nüïí –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10:00 –¥–æ 20:00'
    await call.message.answer(text, reply_markup=directions_kb())
    await call.answer()
    log_user_action(call.from_user.id, 'directions', call.from_user.username)


@router.callback_query(F.data == 'contact')
async def contact_human(call: CallbackQuery):
    await call.message.answer('–ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É üëá\n@cybershop_support')
    await call.answer()
    log_user_action(call.from_user.id, 'contact', call.from_user.username)


@router.message()
async def any_text(message: Message, state: FSMContext):
    if state.get_state() is None:
        await message.delete()
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏')
        log_user_action(message.from_user.id, 'text_removed', message.from_user.username)
