from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

from db.models import ServiceRequest, TradeInRequest, Feedback
from utils.logger import log_user_action
from keyboards.main import main_menu, manual_kb

router = Router()


class ServiceStates(StatesGroup):
    name = State()
    phone = State()
    time = State()


class TradeInStates(StatesGroup):
    manufacturer = State()
    model = State()
    photo1 = State()
    photo2 = State()
    contact = State()


class FeedbackStates(StatesGroup):
    screenshot = State()
    order_info = State()
    contact = State()


async def save_service(session: AsyncSession, data: dict, category: str) -> None:
    session.add(ServiceRequest(
        name=data['name'],
        phone=data['phone'],
        preferred_time=data['time'],
        category=category,
    ))
    await session.commit()


async def save_tradein(session: AsyncSession, data: dict) -> None:
    session.add(TradeInRequest(**data))
    await session.commit()


async def save_feedback(session: AsyncSession, data: dict) -> None:
    session.add(Feedback(**data))
    await session.commit()


@router.callback_query(F.data == 'service_form')
async def start_service_form(call: CallbackQuery, state: FSMContext):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
    await state.update_data(category='maintenance')
    await state.set_state(ServiceStates.name)
    await call.answer()
    log_user_action(call.from_user.id, 'service_form', call.from_user.username)


@router.callback_query(F.data == 'upgrade_form')
async def start_upgrade_form(call: CallbackQuery, state: FSMContext):
    await call.message.answer(
        'üß© –•–æ—Ç–∏—Ç–µ —É—Å–∫–æ—Ä–∏—Ç—å –Ω–æ—É—Ç–±—É–∫, —É–≤–µ–ª–∏—á–∏—Ç—å –æ–±—ä—ë–º –ø–∞–º—è—Ç–∏ –∏–ª–∏ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã?\n\n'
        '–ú—ã –ø—Ä–æ–≤–µ–¥—ë–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –ø–æ–¥—Å–∫–∞–∂–µ–º, –∫–∞–∫ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤–∞—à –Ω–æ—É—Ç–±—É–∫.\n\n'
        'üìå –î–æ—Å—Ç—É–ø–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É "UPGRADE2025".'
    )
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
    await state.update_data(category='upgrade')
    await state.set_state(ServiceStates.name)
    await call.answer()
    log_user_action(call.from_user.id, 'upgrade_form', call.from_user.username)


@router.message(ServiceStates.name)
async def service_name(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    category = data.get('category', 'maintenance')
    await state.update_data(name=message.text, category=category)
    await message.answer('–¢–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram:')
    await state.set_state(ServiceStates.phone)
    log_user_action(message.from_user.id, 'name_entered', message.from_user.username)


@router.message(ServiceStates.phone)
async def service_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer('–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏:')
    await state.set_state(ServiceStates.time)
    log_user_action(message.from_user.id, 'phone_entered', message.from_user.username)


@router.message(ServiceStates.time)
async def service_time(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    data['time'] = message.text
    category = data.get('category', 'maintenance')
    await save_service(session, data, category)
    await message.answer('‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¢–û –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', reply_markup=main_menu())
    await state.clear()
    log_user_action(message.from_user.id, 'service_form_complete', message.from_user.username)


@router.callback_query(F.data == 'manual')
async def show_manual(call: CallbackQuery):
    text = (
        'üí° –ü–æ–ª–µ–∑–Ω–æ –∑–Ω–∞—Ç—å!\n\n'
        '–í—Å–µ –Ω–æ—É—Ç–±—É–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ—Ä–º–æ–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Ç–µ—Ä–º–æ–ø–∞—Å—Ç—É), –∫–æ—Ç–æ—Ä—ã–π —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã—Å—ã—Ö–∞–µ—Ç. –≠—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–µ—Ä–µ–≥—Ä–µ–≤—É —Å–∏—Å—Ç–µ–º—ã, –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ —á–∏–ø–æ–≤ –∏ –≤ –∏—Ç–æ–≥–µ ‚Äî –∫ –ø–æ–ª–æ–º–∫–µ.\n\n'
        '‚û§ –¢–∞–∫–∂–µ –≤–Ω—É—Ç—Ä–∏ —Å–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è –ø—ã–ª—å, –≤–æ–ª–æ—Å—ã –∏ –≥—Ä—è–∑—å, –∫–æ—Ç–æ—Ä—ã–µ –º–µ—à–∞—é—Ç –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—é.\n\n'
        'üîÅ –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º, –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ (–¢–û) –∫–∞–∂–¥—ã–µ 6 –º–µ—Å—è—Ü–µ–≤.'
    )
    await call.message.answer(text, reply_markup=manual_kb())
    await call.answer()
    log_user_action(call.from_user.id, 'manual', call.from_user.username)


@router.callback_query(F.data == 'tradein')
async def start_tradein(call: CallbackQuery, state: FSMContext):
    text = (
        'üîÅ –•–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å —Å—Ç–∞—Ä—ã–π –Ω–æ—É—Ç–±—É–∫ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É –Ω–∞ –Ω–æ–≤—ã–π?\n\n'
        '–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ—Ö–Ω–∏–∫—É –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –¶–µ–Ω–∞ –≤—ã–∫—É–ø–∞ ‚Äî –≤—ã—à–µ —Ä—ã–Ω–æ—á–Ω–æ–π. –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä—Ç–Ω—ë—Ä—ã –ê–≤–∏—Ç–æ.\n\n'
        '‚úÖ –í—ã–∫—É–ø –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –¥–Ω—è –ø–æ—Å–ª–µ –∑–∞—è–≤–∫–∏\nüéÅ –ü—Ä–∏ —Å–¥–∞—á–µ —Ç–µ—Ö–Ω–∏–∫–∏ ‚Äî –ø–æ–ª—É—á–∏—Ç–µ 2 –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ –≤—ã–±–æ—Ä (–º—ã—à–∫–∞, —Å—É–º–∫–∞, –ø–æ–¥—Å—Ç–∞–≤–∫–∞ –∏ –¥—Ä.)'
    )
    await call.message.answer(text)
    await call.message.answer('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:')
    await state.set_state(TradeInStates.manufacturer)
    await call.answer()
    log_user_action(call.from_user.id, 'tradein', call.from_user.username)


@router.message(TradeInStates.manufacturer)
async def tradein_manufacturer(message: Message, state: FSMContext):
    await state.update_data(manufacturer=message.text)
    await message.answer('–ú–æ–¥–µ–ª—å:')
    await state.set_state(TradeInStates.model)
    log_user_action(message.from_user.id, 'manufacturer_entered', message.from_user.username)


@router.message(TradeInStates.model)
async def tradein_model(message: Message, state: FSMContext):
    await state.update_data(model=message.text)
    await message.answer('–§–æ—Ç–æ 1 ‚Äî –≤–Ω–µ—à–Ω—è—è –∫—Ä—ã—à–∫–∞:')
    await state.set_state(TradeInStates.photo1)
    log_user_action(message.from_user.id, 'model_entered', message.from_user.username)


@router.message(TradeInStates.photo1, F.photo)
async def tradein_photo1(message: Message, state: FSMContext):
    photo = message.photo[-1].file_id
    await state.update_data(photo1=photo)
    await message.answer('–§–æ—Ç–æ 2 ‚Äî –Ω–∞–∫–ª–µ–π–∫–∞ —Å –º–æ–¥–µ–ª—å—é:')
    await state.set_state(TradeInStates.photo2)
    log_user_action(message.from_user.id, 'photo1_uploaded', message.from_user.username)


@router.message(TradeInStates.photo2, F.photo)
async def tradein_photo2(message: Message, state: FSMContext):
    photo = message.photo[-1].file_id
    await state.update_data(photo2=photo)
    await message.answer('–ö–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram):')
    await state.set_state(TradeInStates.contact)
    log_user_action(message.from_user.id, 'photo2_uploaded', message.from_user.username)


@router.message(TradeInStates.contact)
async def tradein_contact(message: Message, state: FSMContext, session: AsyncSession):
    await state.update_data(contact=message.text)
    data = await state.get_data()
    await save_tradein(session, data)
    await message.answer('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.', reply_markup=main_menu())
    await state.clear()
    log_user_action(message.from_user.id, 'tradein_complete', message.from_user.username)


@router.callback_query(F.data == 'warranty')
async def start_warranty(call: CallbackQuery, state: FSMContext):
    text = (
        'üéÅ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—é?\n\n'
        '–ö–∞–∂–¥—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –ê–≤–∏—Ç–æ –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏—é –Ω–∞ 10 –¥–Ω–µ–π!\n\n'
        'üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞\nüì¶ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–æ—É—Ç–±—É–∫–∞\nüìû –ò –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç'
    )
    await call.message.answer(text)
    await call.message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç:')
    await state.set_state(FeedbackStates.screenshot)
    await call.answer()
    log_user_action(call.from_user.id, 'warranty', call.from_user.username)


@router.message(FeedbackStates.screenshot, F.photo)
async def feedback_screenshot(message: Message, state: FSMContext):
    photo = message.photo[-1].file_id
    await state.update_data(screenshot=photo)
    await message.answer('–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–æ—É—Ç–±—É–∫–∞:')
    await state.set_state(FeedbackStates.order_info)
    log_user_action(message.from_user.id, 'screenshot_uploaded', message.from_user.username)


@router.message(FeedbackStates.order_info)
async def feedback_order(message: Message, state: FSMContext):
    await state.update_data(order_info=message.text)
    await message.answer('–¢–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram:')
    await state.set_state(FeedbackStates.contact)
    log_user_action(message.from_user.id, 'order_entered', message.from_user.username)


@router.message(FeedbackStates.contact)
async def feedback_contact(message: Message, state: FSMContext, session: AsyncSession):
    await state.update_data(contact=message.text)
    data = await state.get_data()
    await save_feedback(session, data)
    await message.answer('‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞.', reply_markup=main_menu())
    await state.clear()
    log_user_action(message.from_user.id, 'feedback_complete', message.from_user.username)
